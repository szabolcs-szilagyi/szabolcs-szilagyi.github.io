<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
	<channel>
		<title>NodeJS on this&#39;n&#39;that</title>
		<link>https://szab.it/tags/nodejs/</link>
		<description>Recent content in NodeJS on this&#39;n&#39;that</description>
		<generator>Hugo 0.96.0 -- gohugo.io</generator>
		<language>en-us</language>
		<lastBuildDate>Sat, 30 Apr 2022 12:07:00 +0200</lastBuildDate>
		<atom:link href="https://szab.it/tags/nodejs/index.xml" rel="self" type="application/rss+xml" />
		<item>
			<title>Rewrite, refactor, knee-deep in legacy - part two</title>
			<link>https://szab.it/posts/rewrite-refactor-knee-deep-in-legacy-part-two/</link>
			<pubDate>Sat, 30 Apr 2022 12:07:00 +0200</pubDate>
			<guid isPermaLink="true">https://szab.it/posts/rewrite-refactor-knee-deep-in-legacy-part-two/</guid>
			<description>&lt;p&gt;I really don&amp;rsquo;t take on extra work apart of my full time job. At work I do get to
try many different things. We get chance to work on both legacy and greenfield
projects. So really don&amp;rsquo;t feel that I would need extra projects on the side.. :D&lt;/p&gt;
&lt;p&gt;This project that I&amp;rsquo;m gonna write about is a webshop, that sort of fallen into
my lap. Back in 2010, when I started out with programming I&amp;rsquo;ve been doing
webhops and inventory sites, using PHP, MySQL. So it didn&amp;rsquo;t feel too alien to me
to help out every now and then, when the person running it needed help. Even
though I really don&amp;rsquo;t like webhops and always turned them away, this was the
first and last exception.&lt;/p&gt;
&lt;p&gt;I got to be a second dev on this project as the original author had less and
less time to deal with it. Eventually the situation got to the point that I had
to take over the maintenance fully (to much of my dislike).&lt;/p&gt;
&lt;h2 id=&#34;state&#34;&gt;State&lt;/h2&gt;
&lt;p&gt;The site was written in PHP using MySQL and NextJS for the front-end. The
backend was producing normal JSONs, so nothing too exotic there. The issues
started when one started to look under the hood. The original author also didn&amp;rsquo;t
have much time to actually do the site and this was reflected in the code as
well.&lt;/p&gt;
&lt;p&gt;It was really chaotic and as I didn&amp;rsquo;t do programming in PHP for long it was hard
for me to change it in a good way. Since the site was simple there was no
framework used and as it was a rushed job the most common mistake was also made:
no tests were written.&lt;/p&gt;
&lt;p&gt;Front-end was also similar, with the exception that there NextJS gave a nice
frame to it, but also zero tests to see if everything is working.&lt;/p&gt;
&lt;h2 id=&#34;kickoff&#34;&gt;Kickoff&lt;/h2&gt;
&lt;p&gt;When I had to take over the maintenance including running the server, it was
clear that I won&amp;rsquo;t be able to support the PHP backend specially in its current
form. Wanted to fix that up and stick with it, but really couldn&amp;rsquo;t get a handle
on it.&lt;/p&gt;
&lt;p&gt;At that time I started to get to know NestJS as at my company we started to
migrate services to this framework. So for me it was an easy choice to go with
NestJS. The plan was to rewrite the backend using NestJS while keeping the
database schema and HTTP API the same.&lt;/p&gt;
&lt;p&gt;This time I&amp;rsquo;ve made sure to do it in TDD, so that every new route and service
was fully tested. Some logic issues came out that were also present in the PHP
version. It was an interesting journey, but at times it did feel monotone, doing
the same over and over. But on the end all worked out and managed to deploy the
backend with nearly zero change to the front-end.&lt;/p&gt;
&lt;p&gt;With NestJS the default database ORM is TypeORM, it supports many different
databases. In general I don&amp;rsquo;t trust libraries that can do anything while
providing the same interface. But here it actually worked out nicely, as when I
was looking for database providers I couldn&amp;rsquo;t find cheap MySQL provider while I
managed to find a really cheap (actually free plan) for PostgreSQL. This was the
first time where I actually migrated from one database to a different one with
about 10 minutes job thanks to the ORM. I did concentrate on using the ORM&amp;rsquo;s
methods for building queries and had zero raw SQL statements in the code.&lt;/p&gt;
&lt;h2 id=&#34;frontend&#34;&gt;Frontend&lt;/h2&gt;
&lt;p&gt;The frontend wasn&amp;rsquo;t in the best of shape either, but hey it is React thanks to
NextJS, so that help a bit. It wasn&amp;rsquo;t in such a bad shape that I would want to
rewrite from scratch, but I needed some proof after each and every change that
all is working.&lt;/p&gt;
&lt;p&gt;Tried to write tests using Jest, but the react part wasn&amp;rsquo;t written with the best
practices, so it brought out all timing issues. This way proved to be really
slow going. Here I decided to do an end-to-end testing using Cypress instead
unit and functional tests with Jest.&lt;/p&gt;
&lt;p&gt;Had zero experience with Cypress, just seen some PRs and nice comments at work
from colleges. Before jumping into Cypress tests I crunched through a course
from udemy, with double playback speed, think it took me day and a half. Sorry,
don&amp;rsquo;t want to brag here but still makes me smile thinking about the instructor&amp;rsquo;s
voice in double speed :D&lt;/p&gt;
&lt;p&gt;After this I covered all the pages and all the features that I came across. With
cypress it was truly a breeze, timing issues were still present, but manage do
put some &lt;code&gt;cy.wait&lt;/code&gt; commands and TODO comments for a later time.&lt;/p&gt;
&lt;p&gt;Once cypress covered everything, refactoring the front-end and getting rid of
all the timing issues was a dream. Okay maybe not a dream, but went with good
speed and managed to do frequent deploys, knowing all is working.&lt;/p&gt;
&lt;h2 id=&#34;outro&#34;&gt;Outro&lt;/h2&gt;
&lt;p&gt;Overall I&amp;rsquo;m happy that I chose rewrite, with the old code without tests I would
still be having nightmares. Since then I managed to extend on the features of
the site and also automated a lot of tasks on it. All these new features were
done with tests, so at all time I know that the site is working and that the
person relying on it won&amp;rsquo;t lose sales due to bugs.&lt;/p&gt;
&lt;p&gt;Also this project gave me a good chance to deepen my knowledge with NestJS,
Cypress, React and NextJS. Did make me a fan of NestJS and NextJS!&lt;/p&gt;
&lt;p&gt;However I did put a &lt;strong&gt;lot&lt;/strong&gt; of work into it. Looking back on it, eventually I
rewrote the front-end as well. Via refactors think there is no line that I
didn&amp;rsquo;t touch there. So in hind site for a webshop I would pick a provider rather
than hand rolling it.&lt;/p&gt;
</description>
		</item>
		<item>
			<title>Rewrite, refactor, knee-deep in legacy - part one</title>
			<link>https://szab.it/posts/rewrite-refactor-knee-deep-in-legacy/</link>
			<pubDate>Sun, 24 Apr 2022 18:37:00 +0200</pubDate>
			<guid isPermaLink="true">https://szab.it/posts/rewrite-refactor-knee-deep-in-legacy/</guid>
			<description>&lt;p&gt;From time-to-time we encounter some legacy projects - or the braver developers
even work on them day after day. :) When working on such projects we do come
across the exclamation that: &amp;ldquo;Starting from scratch would be quicker than trying
to fix this mess!&amp;rdquo;. This normally comes from the frustration that legacy
projects can cause.&lt;/p&gt;
&lt;p&gt;There are already lots of articles out on the interwebs about refactor vs
rewrite. Failure and success stories and would encourage those who don&amp;rsquo;t have
experience in deciding this question to read many articles, pro and con. This
article includes a few good one:
&lt;a href=&#34;https://medium.com/@herbcaudill/lessons-from-6-software-rewrite-stories-635e4c8f7c22&#34;&gt;https://medium.com/@herbcaudill/lessons-from-6-software-rewrite-stories-635e4c8f7c22&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;So where do I stand with this question? Personally I like to work on legacy
systems, one can feel like Indiana Jones exploring hidden gems, funny comments
and many odd solutions. Apart of this archaeological work when you just correct
a small bit on legacy code that can sometimes yield huge performance
improvements that makes work on them quite rewarding. So from this you can guess
that I&amp;rsquo;m more towards the refactor end of the scope. In my experience rewrite
from scratch doesn&amp;rsquo;t work on larger systems.&lt;/p&gt;
&lt;p&gt;Got two rewrite stories to share. Long-long time ago I had the chance to partake
in a full rewrite of a large system that turned out to be the text book example
of the struggle and up hill battles. Second is a smaller project but was a good
reminder for me why I don&amp;rsquo;t like rewrites.&lt;/p&gt;
&lt;h2 id=&#34;the-system&#34;&gt;The System&lt;/h2&gt;
&lt;p&gt;The system that I have had the chance to contribute in rewriting was like this:
had a legacy code base in python using Django with a MySQL database, then there
was a proof-of-concept app written next to it in NodeJS using MongoDB. This PoC
app supposed to be temporary. Yes, this is the point where you can already start
to laugh, like that ever happens&amp;hellip; temporary&amp;hellip;, of course it went to
production and the temp PoC solution hunted the company for 3+ years.&lt;/p&gt;
&lt;p&gt;We tried to fix up the temp solution to get it into shape and avoid throwing
ever growing amount of money on CPU/memory/DB and network resources. But the
beast always managed to grow another head. This was the point where the lead at
that time decided to start over: clean slate.&lt;/p&gt;
&lt;p&gt;&lt;!-- raw HTML omitted --&gt;Lesson #1:&lt;!-- raw HTML omitted --&gt; when you create a PoC or temp solution it still need to adhere to the
highest quality standards. In our case it was a rushed steaming pile of
spaghetti, straight from the stow.&lt;/p&gt;
&lt;h2 id=&#34;rewrite&#34;&gt;Rewrite&lt;/h2&gt;
&lt;p&gt;Now we have an instable PoC system in production and a stable but painfully slow
legacy system. How would you go about the rewrite? One could say divvy up the
system and start rewriting small portions of it. Yeah, one could definitely take
that path, but that wasn&amp;rsquo;t the one we picked.&lt;/p&gt;
&lt;p&gt;We started to create a parallel system from scratch dreamed up all the
microservices ahead of time. Decided to continue to use NodeJS with MongoDB as
that was already the hype back then. We created a synchronization service that
would actively bring data over from the old python system. The legacy and the
PoC was all used in production and we wanted to test early the new microservices
as well so we constantly synced data over to the system that nobody used yet.&lt;/p&gt;
&lt;p&gt;The development teams were divided along the new and old systems. There was a
larger development team supporting the old system that was actively bringing in
money for the company and paying all of our salaries. Another smaller team had
the marvellous job of learning about new technologies and write the
microservices that will be the new system that will save us all.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;ve had the chance to be in both of those parts (supporting the legacy and help
with the rewrite) actually neither side is fun. Supporting the old application
had the pressure from the clients that they needed newer and newer features,
hunting bugs, dealing with downtimes. Reward part here was that when you have
done something you got instant feedback on your job. In the rewrite team you get
the pressure that everybody is waiting for this saviour system to come. They
expect to get a system that will solve all their problems, it will solve their
insomnia, it saves their marriage, they will be better parents and the new
system will even make them coffee in the morning. Also there is more developers
on the old system cranking out newer and newer features that the new system of
course will support! :D&lt;/p&gt;
&lt;p&gt;Catching the ever growing features of the system we would like to replace is
just like Don Quichotte fighting with the windmills. You have very small chance
of winning. We actually tried to push back on the adoption of the new system
saying that its just not yet ready. But eventually we all agreed that it will
never be fully ready and at one point we need to start using it.&lt;/p&gt;
&lt;h2 id=&#34;adaption-of-the-new-system&#34;&gt;Adaption of the new system&lt;/h2&gt;
&lt;p&gt;The whole team saw that we won&amp;rsquo;t be able to reach feature parity. For the
adoption we pick a client that had the least need of custom features and set
them up with the new system.&lt;/p&gt;
&lt;p&gt;There were a lot of hick-ups, we were correcting a lot of bugs and mistakes that
came from the fact that the new system was also rushed. It didn&amp;rsquo;t become
spaghetti and thanks god we did write &lt;em&gt;some&lt;/em&gt; tests - unlike the mentioned &amp;ldquo;temp
PoC&amp;rdquo; project that had zero tests. But eventually the new system was working, it
started to generate income for the company! To get to this point it took the
teams about 2 years!!! Also there was one big challenge still remaining: get all
the clients on it.&lt;/p&gt;
&lt;p&gt;Migrating the clients was the next stage of the rewrite. Clients shouldn&amp;rsquo;t need
to know about the changes we make in the background. They have a service that
they expect to get regardless if the backend is python or nodejs or assembly.
Interesting to note here that the service provided by the system relied on
historical data. That data was all in the old system! All that data had to be
converted and moved into the new system. This task was the one I actually ended
up enjoying maybe the most. Luckily the conversion wasn&amp;rsquo;t too complex and it was
interesting to see that we filled up the new databases through weeks of
carefully controlled migrations. Had to be careful not to over load the old
system. Then after all that: it worked! The system manage to show the same
reports to the users just like the old system! 2-3 years and we managed to get
to the same point as where we were before! :D&lt;/p&gt;
&lt;h2 id=&#34;different-way&#34;&gt;Different way&lt;/h2&gt;
&lt;p&gt;The temp PoC system was some sort of microservices architecture, sometimes we
were joking about it saying its a micro-monolith as 4 services were serving it.
The python legacy system was monolith. New system with the planning up front
without good experience with microservices was more towards a distributed
monolith with ~8 services serving the flow. We managed to change on this over
time (without starting from scratch).&lt;/p&gt;
&lt;p&gt;Thinking back of the decisions and what happened during the rewrite,
frustrations from both development and customer service teams, if I would have
to do the whole thing all over again, then would choose a different path.&lt;/p&gt;
&lt;p&gt;Starting again with a monolith system would look at the processes and would try
to move out small parts of the big service to a new microservice. Breaking down
the monolith bit by bit, so that all parts are constantly in use and being
validated. When we were doing the rewrite and testing we didn&amp;rsquo;t test the system
with high loads. Of course everything was working on low loads and amazing
developer computers, but when it went to production and came the load there were
lots of performance issues.&lt;/p&gt;
&lt;h2 id=&#34;outro&#34;&gt;Outro&lt;/h2&gt;
&lt;p&gt;In the above case rewrite was a bad decision in my opinion, but still we managed
to get it working. There are cases where you have no other choice than starting
from scratch. In another post I&amp;rsquo;ll share a story where I did a full rewrite and
would do the same again in that situation.&lt;/p&gt;
</description>
		</item>
		<item>
			<title>Bad dependencies and bad interface changes</title>
			<link>https://szab.it/posts/bad-dependencies-and-bad-interface-changes/</link>
			<pubDate>Sat, 25 Jan 2020 12:35:00 +0100</pubDate>
			<guid isPermaLink="true">https://szab.it/posts/bad-dependencies-and-bad-interface-changes/</guid>
			<description>&lt;p&gt;Recently one of my colleagues has shared his pain about a nodeJS package that we
use to zip files.&lt;/p&gt;
&lt;p&gt;His issue was that the library stopped generating the zip files and just hangs.
Eventually found, that in the project the package in question has been upgraded,
but with a small issue. The newer version has changed the interface and the same
method instead of returning the instance it returns a Promise.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Archiver&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;prototype&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;finalize&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;_state&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;aborted&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;emit&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;error&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Error(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;finalize: archive was aborted&amp;#39;&lt;/span&gt;));
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;_state&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;finalize&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;emit&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;error&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Error(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;finalize: archive already finalizing&amp;#39;&lt;/span&gt;));
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;_state&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;finalize&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;_pending&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;===&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;_queue&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;idle&lt;/span&gt;() &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;_statQueue&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;idle&lt;/span&gt;()) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;_finalize&lt;/span&gt;();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;};
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;&lt;!-- raw HTML omitted --&gt;source:&lt;!-- raw HTML omitted --&gt; &lt;a href=&#34;https://github.com/archiverjs/node-archiver/blob/0.15.1/lib/core.js#L489-L507&#34;&gt;https://github.com/archiverjs/node-archiver/blob/0.15.1/lib/core.js#L489-L507&lt;/a&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Archiver&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;prototype&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;finalize&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;_state&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;aborted&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;emit&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;error&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ArchiverError&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;ABORTED&amp;#39;&lt;/span&gt;));
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;_state&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;finalize&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;emit&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;error&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ArchiverError&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;FINALIZING&amp;#39;&lt;/span&gt;));
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;_state&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;finalize&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;_pending&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;===&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;_queue&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;idle&lt;/span&gt;() &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;_statQueue&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;idle&lt;/span&gt;()) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;_finalize&lt;/span&gt;();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;self&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Promise(&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;resolve&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;reject&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;errored&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;self&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;_module&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;on&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;end&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;errored&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;resolve&lt;/span&gt;();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    })
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;self&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;_module&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;on&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;error&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#a6e22e&#34;&gt;errored&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#a6e22e&#34;&gt;reject&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    })
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  })
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;};
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;&lt;!-- raw HTML omitted --&gt;source:&lt;!-- raw HTML omitted --&gt; &lt;a href=&#34;https://github.com/archiverjs/node-archiver/blob/dd7f10d/lib/core.js#L759-L792&#34;&gt;https://github.com/archiverjs/node-archiver/blob/dd7f10d/lib/core.js#L759-L792&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;bad-interface-changes&#34;&gt;Bad interface changes&lt;/h2&gt;
&lt;p&gt;The painful thing about the new code isn&amp;rsquo;t the fact that it has the same name
and returns something new, since the upgrade was not minor but &lt;em&gt;major&lt;/em&gt; upgrade.&lt;/p&gt;
&lt;p&gt;The thing that actually bad in my point of view, that it can return two
completely different things. Till there is an &lt;code&gt;if&lt;/code&gt; that is being triggered it
returns the instance of the class, &lt;strong&gt;but&lt;/strong&gt; once those are exhausted it returns a
&lt;code&gt;Promise&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Icing on the cake that in this case the instance that it returns is a stream,
that we were just piping, but now at some point it will turn in to a &lt;code&gt;Promise&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Generally it is a good rule of thumb that a method should always return with the
same type, no matter on the logic inside. (Unless your method is a type selector
or something like that :D )&lt;/p&gt;
&lt;p&gt;For the above code I could imagine that the original &lt;code&gt;finalize&lt;/code&gt; could have
remained the same, always returning a stream. There could have been a new method
created that would give back a promise and also retaining backward
compatibility. E.g.: introducing an &lt;code&gt;asPromised&lt;/code&gt; method.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Archiver&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;prototype&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;finalize&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;_state&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;aborted&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;emit&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;error&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ArchiverError&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;ABORTED&amp;#39;&lt;/span&gt;));
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;_state&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;finalize&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;emit&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;error&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ArchiverError&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;FINALIZING&amp;#39;&lt;/span&gt;));
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;_state&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;finalize&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;_pending&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;===&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;_queue&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;idle&lt;/span&gt;() &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;_statQueue&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;idle&lt;/span&gt;()) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;_finalize&lt;/span&gt;();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;};
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Archiver&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;prototype&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;asPromised&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;self&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Promise(&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;resolve&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;reject&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;errored&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;self&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;_module&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;on&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;end&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;errored&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;resolve&lt;/span&gt;();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    });
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;self&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;_module&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;on&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;error&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#a6e22e&#34;&gt;errored&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#a6e22e&#34;&gt;reject&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    });
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  });
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;bad-dependencies&#34;&gt;Bad dependencies&lt;/h2&gt;
&lt;p&gt;Now over for the necessity of this npm package.&lt;/p&gt;
&lt;p&gt;This package is used in NodeJS, so we don&amp;rsquo;t send it to do magic on the
front-end, but we use it in a controlled environment: a NodeJS app running in a
Docker container wrapped in a Kubernetes pod.&lt;/p&gt;
&lt;p&gt;For the docker container we use GNU/Linux, so we can have other programs in
there as well, that can be found for Linux.&lt;/p&gt;
&lt;p&gt;The files that we zip are on an NFS drive, so we don&amp;rsquo;t need to stream it, we
know the location of the file as well.&lt;/p&gt;
&lt;p&gt;Here comes the idea:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;we have linux &lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;/li&gt;
&lt;li&gt;we have the files/folders accessible &lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;/li&gt;
&lt;li&gt;we could have the &lt;code&gt;zip&lt;/code&gt; program on the system &lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So in effect we could axe a third party npm package and use &lt;a href=&#34;https://nodejs.org/api/child_process.html#child_process_child_process_exec_command_options_callback&#34;&gt;child_process.exec&lt;/a&gt;
or &lt;a href=&#34;https://nodejs.org/api/child_process.html#child_process_child_process_spawn_command_args_options&#34;&gt;child_process.spawn&lt;/a&gt; method&amp;rsquo;s from NodeJS itself. The extra 3rd party in this
case would be the &lt;code&gt;zip&lt;/code&gt; program, but think it is safe to say that command is a
battle tested, fire hardened program. Which is not likely to cause issues or
change interface. For me an extra benefit of this approach, that we can offload
processing from the main app to a separate CPU thread &lt;em&gt;aaaand&lt;/em&gt; we can also use
&lt;a href=&#34;https://www.gnu.org/software/coreutils/manual/html_node/nice-invocation.html&#34;&gt;GNU&amp;rsquo;s nice utility&lt;/a&gt; to set the importance of the task. Like this we can also
ensure that the main app will always have enough CPU time to respond and the zip
command won&amp;rsquo;t eat it up from the app as well.&lt;/p&gt;
&lt;p&gt;Gains with this:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;zip&lt;/code&gt; is a reliable program that has and is being tested by millions&lt;/li&gt;
&lt;li&gt;offload processing from the main app, so it can still serve other requests
without an issue&lt;/li&gt;
&lt;li&gt;use built-in NodeJS module that is not likely to change interface and also
tested by more than a lonely lib from npmjs.org&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;It is good to think through as what is the goal and not just pick an npm package
off the shelf. The issue you&amp;rsquo;re facing has most likely already been solved.&lt;/p&gt;
</description>
		</item>
	</channel>
</rss>
